# Based on mcdaniel's https://github.com/openedx-actions/tutor-plugin-build-openedx
name: openedx tutor build
description: 'Use Tutor to build a Docker container of openedx and upload it to the DigitalOcean container registry'
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  do-token:
    description: 'DigitalOcean access token'
    required: true
  do-registry-name:
    description: 'The name of the DigitalOcean container registry.'
    required: true
  image-name:
    description: 'Name of the image repository in which the newly created container will be uploaded and tagged. Defaults to "openedx"'
    required: false
    default: 'openedx'
  openedx-repository:
    description: 'The web url of the repository that holds the openedx code. This should only be set when using a forked version of openedx. Defaults to an empty string, which uses the tutor default'
    required: false
    default: ''
  openedx-version:
    description: 'The version of openedx to deploy. This corresponds to a branch or tag name in the openedx repository. Defaults to an empty string, which uses the tutor default'
    required: false
    default: ''
outputs:
  docker-container-url:
    description: 'The registry URL of the Docker container that was created and uploaded'
    value: ${{ steps.docker-image.outputs.uri }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3.0.2

    - name: set up Docker Buildx
      id: setup-docker
      uses: docker/setup-buildx-action@v2

    - name: initialize environment variables
      id: init-env
      shell: bash
      run: |
        echo "REPOSITORY_TAG_OPENEDX=$TUTOR_VERSION-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: initialize Docker image URI
      id: init-docker-image
      shell: bash
      run: |
        echo "DOCKER_IMAGE_OPENEDX=${REGISTRY_URL}/${IMAGE_NAME}:${REPOSITORY_TAG_OPENEDX}" >> $GITHUB_ENV
      env:
        IMAGE_NAME: ${{ inputs.image-name }}
        REGISTRY_URL: registry.digitalocean.com/${{ inputs.do-registry-name }}

    - name: render tutor config
      id: tutor-config-save
      shell: bash
      run: tutor config save --set DOCKER_IMAGE_OPENEDX=${DOCKER_IMAGE_OPENEDX}

    - name: set tutor-dependent environment variables
      shell: bash
      run: |
        echo "THEMES_PATH=$(tutor config printroot)/env/build/openedx/themes" >> $GITHUB_ENV
        echo "PLUGINS_PATH=$(tutor config printroot)/env/build/openedx/requirements" >> $GITHUB_ENV

    - name: ls the theme folder
      id: ls-theme-folder
      shell: bash
      run: ls $THEMES_PATH -lha

    - name: ls the requirements folder
      id: ls-requirements-folder
      shell: bash
      run: ls $PLUGINS_PATH -lha

    - name: build the image
      id: tutor-build-image
      shell: bash
      run: |
        tutor images build ${{ inputs.openedx-repository != '' && format('-a EDX_PLATFORM_REPOSITORY={0}', inputs.openedx-repository) || '' }} \
          ${{ inputs.openedx-version != '' && format('-a EDX_PLATFORM_VERSION={0}', inputs.openedx-version) || '' }} openedx

    - name: install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ inputs.do-token }}

    - name: login to DigitalOcean Container Registry with short-lived credentials
      shell: bash
      run: doctl registry login --expiry-seconds 600

    - name: remove all old images
      shell: bash
      run: |
        if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ];
        then
          doctl registry repository delete-manifest $(echo $IMAGE_NAME) \
          $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force;
        else
          echo "No repository";
        fi
      env:
        IMAGE_NAME: ${{ inputs.image-name }}

    - name: push the image
      id: docker-push-image
      shell: bash
      run: |
        tutor images push openedx
        docker tag ${REGISTRY_URL}/${IMAGE_NAME}:${REPOSITORY_TAG_OPENEDX} ${REGISTRY_URL}/${IMAGE_NAME}:latest
        docker push ${REGISTRY_URL}/${IMAGE_NAME}:latest
      env:
        IMAGE_NAME: ${{ inputs.image-name }}
        REGISTRY_URL: registry.digitalocean.com/${{ inputs.do-registry-name }}

    - name: docker image:tag
      id: docker-image
      shell: bash
      run: |
        echo "::set-output name=uri::$(echo $DOCKER_IMAGE_OPENEDX)"
